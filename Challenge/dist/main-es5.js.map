{"version":3,"sources":["webpack:///$_lazy_route_resource lazy namespace object","webpack:///src/app/app.module.ts","webpack:///src/app/header/header.component.ts","webpack:///src/app/header/header.component.html","webpack:///src/app/home/home.component.ts","webpack:///src/app/home/home.component.html","webpack:///src/app/service/WebRequestService.ts","webpack:///src/app/task-form/task.component.ts","webpack:///src/app/task-form/task.component.html","webpack:///src/app/task-list/task-list.component.ts","webpack:///src/app/task-list/task-list.component.html","webpack:///src/main.ts"],"names":["webpackEmptyAsyncContext","req","Promise","resolve","then","e","Error","code","keys","module","exports","id","AppModule","forRoot","imports","declarations","bootstrap","HeaderComponent","selector","templateUrl","styleUrls","HomeComponent","WebRequestService","http","ROOT_URL","uri","get","formData","post","observe","toPromise","res","list","payload","patch","put","providedIn","TaskControllerComponent","toastr","service","current","resetForm","title","done","description","due","node","tasks","push","index","splice","form","value","EmployeeID","insertRecord","updateRecord","postTask","subscribe","success","refreshList","putEmployee","info","onSubmit","TaskListComponent","Object","assign","confirm","deleteTask","warning","bootstrapModule"],"mappings":"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","file":"main-es5.js","sourcesContent":["function webpackEmptyAsyncContext(req) {\n\t// Here Promise.resolve().then() is used instead of new Promise() to prevent\n\t// uncaught exception popping up in devtools\n\treturn Promise.resolve().then(function() {\n\t\tvar e = new Error(\"Cannot find module '\" + req + \"'\");\n\t\te.code = 'MODULE_NOT_FOUND';\n\t\tthrow e;\n\t});\n}\nwebpackEmptyAsyncContext.keys = function() { return []; };\nwebpackEmptyAsyncContext.resolve = webpackEmptyAsyncContext;\nmodule.exports = webpackEmptyAsyncContext;\nwebpackEmptyAsyncContext.id = \"./$$_lazy_route_resource lazy recursive\";","import { NgModule }      from \"@angular/core\";\r\nimport { BrowserModule } from \"@angular/platform-browser\";\r\nimport { HttpClientModule } from \"@angular/common/http\";\r\n\r\nimport { HomeComponent } from \"./home/home.component\";\r\nimport { HeaderComponent } from \"./header/header.component\";\r\nimport { TaskControllerComponent } from \"./task-form/task.component\"\r\nimport { ToastrModule } from 'ngx-toastr';\r\nimport { CommonModule } from '@angular/common';\r\nimport { FormsModule } from '@angular/forms';\r\nimport { BrowserAnimationsModule } from '@angular/platform-browser/animations';\r\nimport { TaskListComponent } from './task-list/task-list.component';\r\n\r\n/**\r\n * Main module for our application. If creating any new components, be sure to declare them here.\r\n * If creating any new services, provide them here.\r\n */\r\n@NgModule({\r\n  imports: [\r\n    BrowserModule, \r\n    HttpClientModule,\r\n    CommonModule,\r\n    FormsModule,\r\n    BrowserAnimationsModule, // required animations module\r\n    ToastrModule.forRoot(), // ToastrModule added\r\n  ],\r\n  declarations: [ \r\n    HomeComponent,\r\n    HeaderComponent,\r\n    TaskControllerComponent,\r\n    TaskListComponent\r\n  ],\r\n  bootstrap: [\r\n    HomeComponent \r\n  ],\r\n})\r\nexport default class AppModule { \r\n}","import { Component } from \"@angular/core\";\r\n\r\n@Component({\r\n    selector: \"thx-header\",\r\n    templateUrl: \"./header.component.html\",\r\n    styleUrls: [\"./header.component.css\"]\r\n})\r\nexport class HeaderComponent { }","<header>\r\n    <img src=\"../../assets/thinixlogo.png\" alt=\"\" />\r\n    <span>TODO List</span>\r\n</header>","import { Component } from \"@angular/core\";\r\n\r\n\r\n@Component({\r\n  selector: \"thx-home\",\r\n  templateUrl: \"./home.component.html\",\r\n  styleUrls: ['./home.component.css'],\r\n})\r\nexport class HomeComponent  {\r\n}\r\n","<thx-header></thx-header>\r\n\r\n<div class=\"row\">\r\n  <div class=\"col-md-5\">\r\n    <task-form></task-form>\r\n  </div>\r\n  <div class=\"col-md-7\">\r\n    <task-list></task-list>\r\n  </div>\r\n</div>\r\n","import { Injectable } from '@angular/core';\nimport { HttpClient } from '@angular/common/http';\nimport { Task } from '/Users/emin/Desktop/AngularTaskManager/Challenge/src/app/models/task';\n\n@Injectable({\n  providedIn: 'root'\n})\nexport class WebRequestService {\n\n  readonly ROOT_URL = 'http://localhost:3000';\n  formData : Task;\n  list : Task[];\n\n  constructor(private http: HttpClient) {\n\n  }\n\n  get(uri: string) {\n    return this.http.get(`${this.ROOT_URL}/${uri}`);\n  }\n\n  postTask(formData : Task) {\n    return this.http.post(`${this.ROOT_URL}/tasks`, formData, {observe: 'response'});\n  }\n  \n\n  refreshList(){\n    this.http.get(this.ROOT_URL+'/tasks')\n    .toPromise().then(res => this.list = res as Task[]);\n  }\n\n  patch(uri: string, payload: Object) {\n    return this.http.patch(`${this.ROOT_URL}/${uri}`, payload);\n  }\n  putEmployee(formData : Task){\n    return this.http.put(this.ROOT_URL+'/tasks/'+formData.id,formData);\n     \n   }\n\n  deleteTask(id: number) {\n    return this.http.delete(`${this.ROOT_URL}/tasks/`+id);\n  }\n\n}\n","import { Observable } from \"rxjs/Observable\";\nimport { Task } from '/Users/emin/Desktop/AngularTaskManager/Challenge/src/app/models/task';\nimport { HttpClient } from '@angular/common/http';\n\nimport { WebRequestService} from '/Users/emin/Desktop/AngularTaskManager/Challenge/src/app/service/WebRequestService'\nimport { Component, OnInit } from \"@angular/core\";\n\nimport { NgForm } from '@angular/forms';\n\nimport { ToastrService } from \"ngx-toastr\";\n\n\n@Component({\n  selector: \"task-form\",\n  templateUrl: \"./task.component.html\",\n  styleUrls: ['./task.component.css']\n})\nexport class TaskControllerComponent implements OnInit {\n  current:Task = null;\n  tasks: Array<Task>;\n  requests: WebRequestService;\n  private http: HttpClient\n\n  constructor(private toastr: ToastrService, public service: WebRequestService) {\n\n  }\n  ngOnInit(): void {\n    this.resetForm();\n  }\n  \n  createTask(id: number, title: string, done: boolean, description?: string, due?: string){\n    this.current.id = id;\n    this.current.title = title;\n    this.current.description = description;\n    this.current.due = due;\n    this.current.done = done;\n  }\n\n  addTask(node: Task): void {\n    this.tasks.push(node);\n\n  }\n  public deleteTask(index) {\n    this.tasks.splice(index, 1);     \n  } \n  \n  resetForm(form?: NgForm) {\n    if (form != null)\n      form.resetForm();\n    this.service.formData = {\n      id: null,\n      title: '',\n      description: '',\n      due: '',\n      done: false\n    }\n  }\n\n  onSubmit(form: NgForm) {\n    if (form.value.EmployeeID == null)\n      this.insertRecord(form);\n    else\n      this.updateRecord(form);\n  }\n  insertRecord(form: NgForm) {\n    this.service.postTask(form.value).subscribe(res => {\n      this.toastr.success('Inserted successfully', 'EMP. Register');\n      this.resetForm(form);\n      this.service.refreshList();\n    });\n  }\n\n  updateRecord(form: NgForm) {\n    this.service.putEmployee(form.value).subscribe(res => {\n      this.toastr.info('Updated successfully', 'EMP. Register');\n      this.resetForm(form);\n      this.service.refreshList();\n    });\n\n  }\n\n}","<div class=\"jumbotron\">\n  <form #form=\"ngForm\" (submit)=\"onSubmit(form)\" autocomplete=\"off\">\n    <input type=\"hidden\" name=\"id\" #id=\"ngModel\" [(ngModel)]=\"service.formData.id\">\n    <div class=\"form-group\">\n      <label>Title</label>\n      <input name=\"Title\" #FullName=\"ngModel\" [(ngModel)]=\"service.formData.title\" required minlength=\"2\" class=\"form-control\" required>\n      <div class=\"validation-error\" *ngIf=\"service.formData.title.length == 0 \">This field is required.</div>\n    </div>\n    <div class=\"form-group\">\n      <label>Description</label>\n      <input name=\"Description\" #Position=\"ngModel\" [(ngModel)]=\"service.formData.description\" class=\"form-control\">\n    </div>\n    <div class=\"form-row\">\n      <div class=\"form-group col-md-6\">\n        <label>Due Date</label>\n        <input name=\"Due\" #EMPCode=\"ngModel\" [(ngModel)]=\"service.formData.due\" class=\"form-control\">\n      </div>\n      <div class=\"form-group  col-md-6\">\n        <label>Done</label>\n        <button type=\"ngSwitch\">Done</button>\n      </div>\n      \n    </div>\n    <div class=\"form-group\">\n      <button type=\"submit\" [disabled]=\"form.invalid\" class=\"btn btn-lg btn-block\">SUBMIT</button>\n    </div>\n  </form>\n</div>","import { Component, OnInit } from '@angular/core';\nimport { WebRequestService } from '/Users/emin/Desktop/AngularTaskManager/Challenge/src/app/service/WebRequestService';\nimport { Task } from '/Users/emin/Desktop/AngularTaskManager/Challenge/src/app/models/task';\nimport { ToastrService } from 'ngx-toastr';\n\n@Component({\n  selector: 'task-list',\n  templateUrl: './task-list.component.html',\n  styleUrls: ['./task-list.component.css']\n})\nexport class TaskListComponent implements OnInit {\n\n  constructor(public service: WebRequestService,\n    private toastr: ToastrService) { }\n\n  ngOnInit() {\n    this.service.refreshList();\n  }\n\n  populateForm(tasks: Task) {\n    this.service.formData = Object.assign({}, tasks);\n  }\n\n  onDelete(id: number) {\n    if (confirm('Are you sure to delete this record?')) {\n      this.service.deleteTask(id).subscribe(res => {\n        this.service.refreshList();\n        this.toastr.warning('Deleted successfully', ' :)');\n      });\n    }\n  }\n\n}","<div class=\"container\">\n    <div class=\"header\">\n        <h1>Tasks</h1>\n        <p>Getting it done</p>\n    </div>\n    <table class=\"table table-hover\">\n        <tr *ngFor=\"let tasks of service.list\">\n          <div class=\"Expanding\">\n              <td (click)=\"populateForm(tasks)\">[{{tasks.id}}]-{{tasks.title}}</td>\n              <td><button (click)=\"onDelete(tasks.id)\" class=\"btn btn-sm btn-outline-danger\">X</button></td>\n          </div>\n        </tr>\n      </table>\n</div>","import AppModule from \"./app/app.module\";\r\nimport { platformBrowserDynamic } from \"@angular/platform-browser-dynamic\";\r\nimport \"zone.js/dist/zone\";\r\n\r\n\r\n/**\r\n * This is the main entry point for the applications. It's only job is to 'Bootstrap' our home module\r\n */\r\nplatformBrowserDynamic().bootstrapModule(AppModule);\r\n\r\n"]}